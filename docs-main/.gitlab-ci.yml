# SPDX-FileCopyrightText: OpenTalk GmbH <mail@opentalk.eu>
#
# SPDX-License-Identifier: EUPL-1.2

---
stages:
  - clone
  - lint
  - build
  - container

cache: &global_cache
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .tmp
    - .yarn
  policy: pull-push

clone:support:
  needs: []
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
    - if: $CI_COMMIT_TAG != null
  stage: clone
  image: bitnami/git:latest
  variables:
    REPO_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@git.opentalk.dev
  cache:
    <<: *global_cache
  artifacts:
    name: $CI_JOB_NAME
    paths:
      - i18n
      - user-docs
  script:
    - ci/clone-repo-support

clone:controller:
  needs: []
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
    - if: $CI_COMMIT_TAG != null
  stage: clone
  image: bitnami/git:latest
  variables:
    REPO_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@git.opentalk.dev
  cache:
    <<: *global_cache
  artifacts:
    name: $CI_JOB_NAME
    paths:
      - developer-docs
      - admin-docs
      - openapi
  script:
    ci/clone-repo-controller

clone:controller-enterprise:
  needs: []
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
    - if: $CI_COMMIT_TAG != null
  stage: clone
  image: bitnami/git:latest
  variables:
    REPO_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@git.opentalk.dev
  cache:
    <<: *global_cache
  artifacts:
    name: $CI_JOB_NAME
    paths:
      - developer-docs
      - admin-docs
  script:
    ci/clone-repo-controller-enterprise

clone:recorder:
  needs: []
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
    - if: $CI_COMMIT_TAG != null
  stage: clone
  image: bitnami/git:latest
  variables:
    REPO_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@git.opentalk.dev
  cache:
    <<: *global_cache
  artifacts:
    name: $CI_JOB_NAME
    paths:
      - admin-docs
  script:
    ci/clone-repo-recorder

clone:smtp-mailer:
  needs: []
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
    - if: $CI_COMMIT_TAG != null
  stage: clone
  image: bitnami/git:latest
  variables:
    REPO_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@git.opentalk.dev
  cache:
    <<: *global_cache
  artifacts:
    name: $CI_JOB_NAME
    paths:
      - admin-docs
  script:
    ci/clone-repo-smtp-mailer

clone:obelisk:
  needs: []
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
    - if: $CI_COMMIT_TAG != null
  stage: clone
  image: bitnami/git:latest
  variables:
    REPO_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@git.opentalk.dev
  cache:
    <<: *global_cache
  artifacts:
    name: $CI_JOB_NAME
    paths:
      - admin-docs
  script:
    ci/clone-repo-obelisk

lint:yaml:
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  stage: lint
  image: archlinux:latest
  before_script:
    - pacman -Syy --noconfirm yamllint
  script: yamllint .

lint:markdown:
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  stage: lint
  image: registry.gitlab.com/pipeline-components/markdownlint:latest
  script:
    - mdl --style .markdown_style.rb  --warnings .

lint:licensing:
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  stage: lint
  image:
    name: fsfe/reuse:latest
    entrypoint: ['']
  script:
    - reuse lint

build:
  needs: [
    clone:support,
    clone:controller,
    clone:controller-enterprise,
    clone:recorder,
    clone:smtp-mailer,
    clone:obelisk,
  ]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
    - if: $CI_COMMIT_TAG != null
  stage: build
  image:
    name: node:lts
    entrypoint: ['']
  cache:
    <<: *global_cache
  artifacts:
    paths:
      - build
  script:
    - yarn install --immutable
    - yarn build

container:latest:
  needs: [build]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_PIPELINE_SOURCE == 'pipeline' && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: container
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - mkdir -p /kaniko/.docker
    - >
      echo
      "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" >
      /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --registry-mirror=mirror.gcr.io
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --cache=true
      --cache-ttl=24h
      --destination $CI_REGISTRY_IMAGE:latest
      --force

container:tag:
  needs: [build]
  rules:
    - if: $CI_COMMIT_TAG != null
  stage: container
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - mkdir -p /kaniko/.docker
    - >
      echo
      "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" >
      /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --registry-mirror=mirror.gcr.io
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
      --force
